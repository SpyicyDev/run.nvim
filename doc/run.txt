*run*  A powerful and flexible command execution plugin for Neovim

Author:   SpyicyDev
License:  MIT
Version:  1.0.0

==============================================================================
CONTENTS                                                           *run-contents*

    1. Introduction .......................... |run-introduction|
    2. Requirements .......................... |run-requirements|
    3. Installation .......................... |run-installation|
    4. Configuration ......................... |run-configuration|
    5. Commands .............................. |run-commands|
    6. Mappings ............................. |run-mappings|
    7. Project Configuration ................. |run-project-config|
    8. Command Types ......................... |run-command-types|
    9. Environment Variables ................. |run-environment|
    10. Command Chaining ..................... |run-command-chaining|
    11. Automatic Reloading .................. |run-auto-reload|
    12. Error Handling ....................... |run-error-handling|
    13. API ................................. |run-api|

==============================================================================
1. INTRODUCTION                                               *run-introduction*

run.nvim is a powerful and flexible command execution plugin for Neovim that
makes running project commands a breeze. Execute shell commands, Vim commands,
and Lua functions with ease, all while maintaining project-specific
configurations.

==============================================================================
2. REQUIREMENTS                                              *run-requirements*

- Neovim >= 0.8.0
- FTerm.nvim (required for terminal command execution)

==============================================================================
3. INSTALLATION                                             *run-installation*

Using lazy.nvim: >lua
    {
        'SpyicyDev/run.nvim',
        dependencies = {
            'numToStr/FTerm.nvim', -- Required for terminal commands
        },
        config = function()
            require('run').setup({
                -- your configuration here
            })
        end
    }
<

==============================================================================
4. CONFIGURATION                                           *run-configuration*

Default configuration: >lua
    require('run').setup({
        keys = {
            run = "<leader>rr",      -- Run current file or project command
            run_proj = "<leader>rt", -- Show project commands menu
        },
        filetype = {
            -- Filetype-specific commands
            -- Example:
            -- python = "python3 %f",
            -- javascript = "node %f",
        }
    })
<

==============================================================================
5. COMMANDS                                                     *run-commands*

                                                                      *:Run*
:Run                    Run the current file's filetype command or project
                       command based on context.

                                                            *:RunSetDefault*
:RunSetDefault          Set a default command from the project configuration.
                       Only available when a project config file exists.

                                                           *:RunReloadProj*
:RunReloadProj          Reload the project configuration file.

==============================================================================
6. MAPPINGS                                                     *run-mappings*

Default key mappings (can be customized in setup):

<leader>rr              Run the current file or project command
<leader>rt              Open project commands menu (only when project config exists)

Note: All mappings are buffer-local and only set when keys are configured.

==============================================================================
7. PROJECT CONFIGURATION                                  *run-project-config*

Project-specific configuration is stored in a `run.nvim.lua` file in your
project root. The file should return a table with command configurations.

Example configuration: >lua

    return {
        -- Basic command configuration
        test = {
            name = "Run Tests",      -- Display name in selection menu
            cmd = "npm test",        -- Command to execute
            filetype = "javascript", -- Optional, limit to specific filetype
            env = {                  -- Optional environment variables
                NODE_ENV = "test"
            }
        },

        -- Command with function
        build = {
            name = "Build Project",
            cmd = function()
                return "npm run build"
            end
        },

        -- Command chain
        deploy = {
            name = "Deploy",
            cmd = {
                "npm run build",
                {
                    cmd = "npm run test",
                    continue_on_error = true
                },
                {
                    cmd = "npm run deploy",
                    when = function()
                        return vim.fn.filereadable("dist/index.js") == 1
                    end
                }
            }
        },

        -- Set default command
        default = "test"
    }
<

==============================================================================
8. COMMAND TYPES                                           *run-command-types*

run.nvim supports three types of commands:

1. Shell Commands                                    *run-shell-commands*
   Regular shell commands executed in FTerm: >lua
   cmd = "npm test"
<

2. Vim Commands                                        *run-vim-commands*
   Vim commands (prefixed with ":") executed directly: >lua
   cmd = ":write | source %"
<

3. Lua Functions                                      *run-lua-commands*
   Functions that return a command string: >lua
   cmd = function()
       return "echo " .. vim.fn.expand("%")
   end
<

==============================================================================
9. ENVIRONMENT VARIABLES                                    *run-environment*

Environment variables can be specified in command configurations:

1. Static Values: >lua
    env = {
        NODE_ENV = "development",
        PORT = "3000"
    }
<

2. Dynamic Values: >lua
    env = {
        CURRENT_FILE = function()
            return vim.fn.expand("%:p")
        end
    }
<

Special Variables:
    %f              Expands to the current buffer's file path

==============================================================================
10. COMMAND CHAINING                                    *run-command-chaining*

Commands can be chained with control flow options: >lua

    cmd = {
        -- Basic command
        "npm run clean",

        -- Command with error handling
        {
            cmd = "npm run build",
            continue_on_error = true  -- Continue chain even if this fails
        },

        -- Conditional command
        {
            cmd = "npm run test",
            when = function()         -- Only runs if condition is true
                return vim.fn.filereadable("package.json") == 1
            end
        },

        -- Always run command
        {
            cmd = "npm run deploy",
            always_run = true         -- Runs even if previous commands failed
        }
    }
<

Chain Command Options:
    continue_on_error    Continue chain even if this command fails
    when                 Function that determines if command should run
    always_run          Run command even if previous commands failed

==============================================================================
11. AUTOMATIC RELOADING                                    *run-auto-reload*

The plugin automatically reloads project configuration in these cases:

1. Directory Changes
   Configuration is reloaded when changing directories using :cd, :lcd, etc.

2. File Changes
   Configuration is reloaded when saving the run.nvim.lua file.

3. Manual Reload
   Configuration can be reloaded using :RunReloadProj command.

==============================================================================
12. ERROR HANDLING                                      *run-error-handling*

The plugin provides error notifications in these cases:

1. Configuration Errors
   - Missing key configuration
   - Invalid project configuration format
   - Project configuration file loading errors

2. Command Errors
   - Command execution failures
   - Invalid command format
   - Missing required command fields

3. Environment Errors
   - Invalid environment variable format
   - Failed dynamic environment variable evaluation

All errors are displayed using Neovim's notification system with appropriate
error levels and descriptive messages.

==============================================================================
13. API                                                          *run-api*

run.nvim provides a Lua API for programmatic control:

setup({opts})                                                  *run.setup()*
    Initialize the plugin with configuration options.
    Parameters: ~
        {opts}    Configuration table (see |run-configuration|)

run()                                                           *run.run()*
    Run the current file or project command.

run_proj()                                                 *run.run_proj()*
    Show the project commands menu (only when project config exists).

reload_proj()                                           *run.reload_proj()*
    Reload the project configuration file.

set_default()                                           *run.set_default()*
    Set the default command from project configuration.
    Only available when project config exists.

 vim:tw=78:ts=8:ft=help:norl:
